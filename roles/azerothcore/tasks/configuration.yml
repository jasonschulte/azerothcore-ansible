---
#####################
# Folder creation
#####################

- name: Create server log folder
  file:
    path: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server_release }}/log"
    state: "directory"
    mode: "0755"
    owner: "{{ azerothcore_user }}"
    group: "{{ azerothcore_user }}"

#####################
# Existing configuration files
#####################

- name: Check if previous server configuration exists
  stat:
    path: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server }}/etc/"
  register: previousserver_conf

- name: Find all files present from previous server
  shell: ls /home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server }}/etc/*.conf
  register: previousserver_files
  when: previousserver_conf.stat.exists is defined and previousserver_conf.stat.exists == true

# Copy all old files, but don't overwrite any existing files
- name: Copy all previous configuration files
  copy:
    src: "{{ item }}"
    dest: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server_release }}/etc/"
    force: "no" # This is important
    remote_src: "yes"
  with_items:
    - "{{ previousserver_files.stdout_lines }}"
  when: previousserver_conf.stat.exists is defined and previousserver_conf.stat.exists == true

- name: Check if previous module configuration exists
  stat:
    path: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server }}/etc/modules/"
  register: previousmodule_conf

- name: Find all files present from previous modules
  shell: ls /home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server }}/etc/modules/*.conf
  register: previousmodule_files
  when: previousmodule_conf.stat.exists is defined and previousmodule_conf.stat.exists == true

# Copy all old files, but don't overwrite any existing files
- name: Copy all previous module configuration files
  copy:
    src: "{{ item }}"
    dest: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server_release }}/etc/modules/"
    force: "no" # This is important
    remote_src: "yes"
  with_items:
    - "{{ previousmodule_files.stdout_lines }}"
  when: previousmodule_conf.stat.exists is defined and previousmodule_conf.stat.exists == true

#####################
# New configuration files
#####################

- name: Check if previous 'worldserver.conf' exists
  stat:
    path: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server }}/etc/worldserver.conf"
  register: worldserver_conf

- name: Copy new 'worldserver.conf'
  copy:
    src: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server_release }}/etc/worldserver.conf.dist"
    dest: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server_release }}/etc/worldserver.conf"
    remote_src: "yes"
  when: worldserver_conf.stat.exists is defined and worldserver_conf.stat.exists == false

- name: Modify new 'worldserver.conf'
  lineinfile:
    dest: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server_release }}/etc/worldserver.conf"
    regexp: "{{ item.regexmatch }}"
    line: "{{ item.insertstring }}"
  with_items:
    - { regexmatch: '^DataDir =', insertstring: 'DataDir = "../data"' }
    - { regexmatch: '^LogsDir =', insertstring: 'LogsDir = "../log"' }
    - { regexmatch: '^LoginDatabaseInfo ', insertstring: 'LoginDatabaseInfo = "{{ azerothcore_db_server }};3306;{{ azerothcore_db_user }};{{ azerothcore_db_password }};{{ azerothcore_db_auth }}"' }
    - { regexmatch: '^WorldDatabaseInfo ', insertstring: 'WorldDatabaseInfo = "{{ azerothcore_db_server }};3306;{{ azerothcore_db_user }};{{ azerothcore_db_password }};{{ azerothcore_db_world }}"' }
    - { regexmatch: '^CharacterDatabaseInfo ', insertstring: 'CharacterDatabaseInfo = "{{ azerothcore_db_server }};3306;{{ azerothcore_db_user }};{{ azerothcore_db_password }};{{ azerothcore_db_characters }}"' }
  when: worldserver_conf.stat.exists is defined and worldserver_conf.stat.exists == false

- name: Check if previous 'authserver.conf' exists
  stat:
    path: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server }}/etc/authserver.conf"
  register: authserver_conf

- name: Copy new 'authserver.conf'
  copy:
    src: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server_release }}/etc/authserver.conf.dist"
    dest: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server_release }}/etc/authserver.conf"
    remote_src: "yes"
  when: authserver_conf.stat.exists is defined and authserver_conf.stat.exists == false

- name: Modify new 'authserver.conf'
  lineinfile:
    dest: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server_release }}/etc/authserver.conf"
    regexp: "{{ item.regexmatch }}"
    line: "{{ item.insertstring }}"
  with_items:
    - { regexmatch: '^LoginDatabaseInfo ', insertstring: 'LoginDatabaseInfo = "{{ azerothcore_db_server }};3306;{{ azerothcore_db_user }};{{ azerothcore_db_password }};{{ azerothcore_db_auth }}"' }
    - { regexmatch: '^LogsDir =', insertstring: 'LogsDir = "../log"' }
  when: authserver_conf.stat.exists is defined and authserver_conf.stat.exists == false

#####################
# Systemd files
#####################

# - name: Copy systemd files for easy stop/start/restart
#   template:
#     src: "etc/systemd/system/{{ item }}"
#     dest: "/etc/systemd/system/{{ item }}"
#     owner: "root"
#     group: "root"
#   with_items:
#     - authserver.service
#     - worldserver.service
#   become: true
#   register: systemd_files

# - name: Enable systemd services - authserver
#   systemd:
#     enabled: "yes"
#     name: authserver
#   become: true
#   when: azerothcore_service == "enable"

# - name: Enable systemd services - worldserver
#   systemd:
#     enabled: "yes"
#     name: worldserver
#   become: true
#   when: azerothcore_service == "enable"

- name: Update symlink to data folder
  file:
    src: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/data/{{ azerothcore_data_version }}"
    path: "/home/{{ azerothcore_user }}/{{ azerothcore_folder }}/{{ azerothcore_server_release }}/data"
    state: link
    owner: "{{ azerothcore_user }}"
    group: "{{ azerothcore_user }}"